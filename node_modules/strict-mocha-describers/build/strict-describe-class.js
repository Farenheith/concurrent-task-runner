"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const test_utils_1 = require("./test-utils");
const mocha_1 = require("mocha");
const method_describe_helper_1 = require("./method-describe-helper");
const static_method_describe_helper_1 = require("./static-method-describe-helper");
function mountClassDescribe(suite) {
    return (cls, bootStrap, fn) => {
        const methodDescribeHelper = new method_describe_helper_1.MethodDescribeHelper(bootStrap, cls);
        suite(`class ${cls.name}`, () => {
            fn(methodDescribeHelper.createDescribe());
        });
    };
}
exports.mountClassDescribe = mountClassDescribe;
function mountSructDescribe(suite) {
    return (cls, description, fn) => {
        const methodDescribeHelper = new static_method_describe_helper_1.StaticMethodDescribeHelper(cls);
        suite(description, () => {
            fn(methodDescribeHelper.createStaticDescribe());
        });
    };
}
exports.mountSructDescribe = mountSructDescribe;
function mountStaticClassDescribe(suite) {
    return (cls, fn) => {
        const methodDescribeHelper = new static_method_describe_helper_1.StaticMethodDescribeHelper(cls);
        suite(`static class ${cls.name}`, () => {
            fn(methodDescribeHelper.createStaticDescribe());
        });
    };
}
exports.mountStaticClassDescribe = mountStaticClassDescribe;
/**
 * A describer to create a Test Suite for a single class.
 * Using this describer is way to enforce a strict organization in the unit test,
 * where 3 sections are enforced to be written separetely, defnined by the paremeters this method receives
 * @param cls the class you want to test
 * @param bootStrapper method used to create the target instance for the test and the mocked services.
 * It's recommended for all mocked services to be just empty objects but with the correct type.
 * This way, you can stub each method each 'method test suite' will need and so you can garantee that
 * no other class will run during your test that you didn't intented to.
 * @param testSuites test suites is a wrapper object for 6 kind of test cases:
 * first, suites are separated by 'instance' and 'static'. The difference between those is that the bootstrapper
 * are not ran for the static tests, as they're intended to static methods.
 * after that, you have three categories on each one: methods, privateMethods and general.
 * For general, there's no trick, it just an usual test. For the other ones, you must specify the name
 * of an existing method. During the test, the only method that will be real is the specified one. Any other method of the class
 * will throw an error. This behavior helps to eliminate scope invasion during the tests, and you're assured that no other code
 * other than the method being tested will run.
 */
exports.describeStaticClass = test_utils_1.testUtils.setupFunction(mountStaticClassDescribe, mocha_1.describe);
exports.describeClass = test_utils_1.testUtils.setupFunction(mountClassDescribe, mocha_1.describe);
exports.describeClass.static = exports.describeStaticClass;
exports.describeStruct = test_utils_1.testUtils.setupFunction(mountSructDescribe, mocha_1.describe);
//# sourceMappingURL=strict-describe-class.js.map