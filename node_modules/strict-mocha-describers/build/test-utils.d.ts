import { BaseMochaType } from './types/base-mocha-function';
import { MethodBackup } from "./types/method-backup";
import { ClassOf } from "./types/class-of";
export declare const testUtils: {
    prepare<T>(service: T, prototype: T, methodToTest?: keyof T | undefined): MethodBackup<T>[];
    getSubjects<T_1>(prototype: T_1, service: T_1): T_1[];
    getMockableMethods<T_2>(subjects: T_2[], service: T_2, methodToTest: keyof T_2 | undefined): (keyof T_2)[];
    getSubjectMockableMethods<T_3>(subject: T_3, service: T_3, methodToTest: keyof T_3 | undefined, methods: (keyof T_3)[]): void;
    createBackup<T_4>(methods: (keyof T_4)[], backup: MethodBackup<T_4>[], service: T_4): void;
    mountStaticTest<T_5>(cls: T_5, methodName: keyof T_5, callback: () => void | PromiseLike<void>): void;
    mountInstanceTest<T_6, Class extends ClassOf<T_6>>(service: () => T_6, cls: Class, methodName: keyof T_6, callback: () => void | PromiseLike<void>): void;
    restoreBackup<T_7>(backup: MethodBackup<T_7>[], target: T_7): void;
    isMockable<T_8>(key: keyof T_8, prototype: T_8, service: T_8, methodToTest?: keyof T_8 | undefined): boolean;
    getMockedMethod<T_9>(name: keyof T_9): T_9[keyof T_9];
    setupFunction<A extends Function, B extends Function>(transformer: (a: A) => B, mochaBase: BaseMochaType<A>): BaseMochaType<B>;
};
