{"version":3,"file":"/home/thiagosantos/Documents/projects/personal/task-runner/concurrent-task-runner/src/concurrent-task-runner.ts","sources":["/home/thiagosantos/Documents/projects/personal/task-runner/concurrent-task-runner/src/concurrent-task-runner.ts"],"names":[],"mappings":";;AAAA,qCAA6B;AAE7B,MAAa,oBAAoB;IAI/B,YACmB,eAA0B,EAC3C,WAAmB,EACF,UAAqC,EACrC,MAA0D;QAH1D,oBAAe,GAAf,eAAe,CAAW;QAE1B,eAAU,GAAV,UAAU,CAA2B;QACrC,WAAM,GAAN,MAAM,CAAoD;QAPrE,iBAAY,GAAG,CAAC,CAAC;QASvB,IAAI,CAAC,KAAK,GAAG,IAAI,iBAAM,CAAC;YACtB,SAAS,EAAE,IAAI;YACf,WAAW;SACZ,CAAC,CAAC;IACL,CAAC;IAEO,YAAY;QAClB,MAAM,MAAM,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QACvD,IAAI,CAAC,YAAY,EAAE,CAAC;QACpB,MAAM,YAAY,GAAc,EAAE,CAAC;QACnC,OAAO,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM;eACjD,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,EACxE;YACA,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;YAC3D,IAAI,CAAC,YAAY,EAAE,CAAC;SACrB;QAED,OAAO,GAAG,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;IACtD,CAAC;IAEO,KAAK,CAAC,WAAW,CAAC,MAAe,EAAE,YAAuB;QAChE,MAAM,KAAK,GAAG,EAAY,CAAC;QAC3B,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QAEjC,KAAK,MAAM,UAAU,IAAI,YAAY,EAAE;YACrC,MAAM,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;SACtC;IACH,CAAC;IAEO,eAAe,CAAC,OAAgB,EAAE,OAAgB;QACxD,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;IAC/D,CAAC;IAEF,KAAK,CAAC,GAAG;QACN,OAAO,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE;YACtD,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC;SACrC;QAED,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;IAC7B,CAAC;CACF;AAlDD,oDAkDC","sourcesContent":["import PQueue from 'p-queue';\n\nexport class ConcurrentTaskRunner<TEntity, TCache> {\n  private currentIndex = 0;\n  private readonly queue: PQueue;\n\n  constructor(\n    private readonly orderedEntities: TEntity[],\n    concurrency: number,\n    private readonly getGroupId: (job: TEntity) => unknown,\n    private readonly doWork: (job: TEntity, cache: TCache) => PromiseLike<void>,\n  ) {\n    this.queue = new PQueue({\n      autoStart: true,\n      concurrency,\n    });\n  }\n\n  private getNextTasks() {\n    const entity = this.orderedEntities[this.currentIndex];\n    this.currentIndex++;\n    const nextEntities: TEntity[] = [];\n    while (this.currentIndex < this.orderedEntities.length\n      && this.isFromSameGroup(entity, this.orderedEntities[this.currentIndex])\n    ) {\n      nextEntities.push(this.orderedEntities[this.currentIndex]);\n      this.currentIndex++;\n    }\n\n    return () => this.doWorkGroup(entity, nextEntities);\n  }\n\n  private async doWorkGroup(entity: TEntity, nextEntities: TEntity[]) {\n    const cache = {} as TCache;\n    await this.doWork(entity, cache);\n\n    for (const nextEntity of nextEntities) {\n      await this.doWork(nextEntity, cache);\n    }\n  }\n\n  private isFromSameGroup(entity1: TEntity, entity2: TEntity) {\n    return this.getGroupId(entity1) === this.getGroupId(entity2);\n  }\n\n\tasync run() {\n    while (this.currentIndex < this.orderedEntities.length) {\n      this.queue.add(this.getNextTasks());\n    }\n\n    return this.queue.onIdle();\n  }\n}\n"]}