{"/home/thiagosantos/Documents/projects/personal/task-runner/concurrent-task-runner/src/concurrent-task-runner.ts":{"path":"/home/thiagosantos/Documents/projects/personal/task-runner/concurrent-task-runner/src/concurrent-task-runner.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":18},"end":{"line":3,"column":36}},"2":{"start":{"line":6,"column":8},"end":{"line":6,"column":47}},"3":{"start":{"line":7,"column":8},"end":{"line":7,"column":37}},"4":{"start":{"line":8,"column":8},"end":{"line":8,"column":29}},"5":{"start":{"line":9,"column":8},"end":{"line":9,"column":30}},"6":{"start":{"line":10,"column":8},"end":{"line":13,"column":11}},"7":{"start":{"line":16,"column":23},"end":{"line":16,"column":62}},"8":{"start":{"line":17,"column":8},"end":{"line":17,"column":28}},"9":{"start":{"line":18,"column":29},"end":{"line":18,"column":31}},"10":{"start":{"line":19,"column":8},"end":{"line":23,"column":9}},"11":{"start":{"line":21,"column":12},"end":{"line":21,"column":71}},"12":{"start":{"line":22,"column":12},"end":{"line":22,"column":32}},"13":{"start":{"line":24,"column":8},"end":{"line":24,"column":60}},"14":{"start":{"line":24,"column":21},"end":{"line":24,"column":59}},"15":{"start":{"line":27,"column":22},"end":{"line":27,"column":24}},"16":{"start":{"line":28,"column":8},"end":{"line":28,"column":41}},"17":{"start":{"line":29,"column":8},"end":{"line":31,"column":9}},"18":{"start":{"line":30,"column":12},"end":{"line":30,"column":49}},"19":{"start":{"line":34,"column":8},"end":{"line":34,"column":69}},"20":{"start":{"line":37,"column":8},"end":{"line":39,"column":9}},"21":{"start":{"line":38,"column":12},"end":{"line":38,"column":48}},"22":{"start":{"line":40,"column":8},"end":{"line":40,"column":35}},"23":{"start":{"line":43,"column":0},"end":{"line":43,"column":52}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":5,"column":4},"end":{"line":5,"column":5}},"loc":{"start":{"line":5,"column":66},"end":{"line":14,"column":5}},"line":5},"1":{"name":"(anonymous_1)","decl":{"start":{"line":15,"column":4},"end":{"line":15,"column":5}},"loc":{"start":{"line":15,"column":19},"end":{"line":25,"column":5}},"line":15},"2":{"name":"(anonymous_2)","decl":{"start":{"line":24,"column":15},"end":{"line":24,"column":16}},"loc":{"start":{"line":24,"column":21},"end":{"line":24,"column":59}},"line":24},"3":{"name":"(anonymous_3)","decl":{"start":{"line":26,"column":4},"end":{"line":26,"column":5}},"loc":{"start":{"line":26,"column":44},"end":{"line":32,"column":5}},"line":26},"4":{"name":"(anonymous_4)","decl":{"start":{"line":33,"column":4},"end":{"line":33,"column":5}},"loc":{"start":{"line":33,"column":38},"end":{"line":35,"column":5}},"line":33},"5":{"name":"(anonymous_5)","decl":{"start":{"line":36,"column":4},"end":{"line":36,"column":5}},"loc":{"start":{"line":36,"column":16},"end":{"line":41,"column":5}},"line":36}},"branchMap":{"0":{"loc":{"start":{"line":19,"column":15},"end":{"line":20,"column":84}},"type":"binary-expr","locations":[{"start":{"line":19,"column":15},"end":{"line":19,"column":62}},{"start":{"line":20,"column":15},"end":{"line":20,"column":84}}],"line":19}},"s":{"0":1,"1":1,"2":5,"3":5,"4":5,"5":5,"6":5,"7":1,"8":1,"9":1,"10":1,"11":2,"12":2,"13":1,"14":1,"15":1,"16":1,"17":1,"18":3,"19":2,"20":1,"21":3,"22":1,"23":1},"f":{"0":5,"1":1,"2":1,"3":1,"4":2,"5":1},"b":{"0":[3,3]},"inputSourceMap":{"version":3,"file":"/home/thiagosantos/Documents/projects/personal/task-runner/concurrent-task-runner/src/concurrent-task-runner.ts","sources":["/home/thiagosantos/Documents/projects/personal/task-runner/concurrent-task-runner/src/concurrent-task-runner.ts"],"names":[],"mappings":";;AAAA,qCAA6B;AAE7B,MAAa,oBAAoB;IAI/B,YACmB,eAA0B,EAC3C,WAAmB,EACF,UAAqC,EACrC,MAA0D;QAH1D,oBAAe,GAAf,eAAe,CAAW;QAE1B,eAAU,GAAV,UAAU,CAA2B;QACrC,WAAM,GAAN,MAAM,CAAoD;QAPrE,iBAAY,GAAG,CAAC,CAAC;QASvB,IAAI,CAAC,KAAK,GAAG,IAAI,iBAAM,CAAC;YACtB,SAAS,EAAE,IAAI;YACf,WAAW;SACZ,CAAC,CAAC;IACL,CAAC;IAEO,YAAY;QAClB,MAAM,MAAM,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QACvD,IAAI,CAAC,YAAY,EAAE,CAAC;QACpB,MAAM,YAAY,GAAc,EAAE,CAAC;QACnC,OAAO,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM;eACjD,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,EACxE;YACA,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;YAC3D,IAAI,CAAC,YAAY,EAAE,CAAC;SACrB;QAED,OAAO,GAAG,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;IACtD,CAAC;IAEO,KAAK,CAAC,WAAW,CAAC,MAAe,EAAE,YAAuB;QAChE,MAAM,KAAK,GAAG,EAAY,CAAC;QAC3B,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QAEjC,KAAK,MAAM,UAAU,IAAI,YAAY,EAAE;YACrC,MAAM,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;SACtC;IACH,CAAC;IAEO,eAAe,CAAC,OAAgB,EAAE,OAAgB;QACxD,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;IAC/D,CAAC;IAEF,KAAK,CAAC,GAAG;QACN,OAAO,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE;YACtD,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC;SACrC;QAED,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;IAC7B,CAAC;CACF;AAlDD,oDAkDC","sourcesContent":["import PQueue from 'p-queue';\n\nexport class ConcurrentTaskRunner<TEntity, TCache> {\n  private currentIndex = 0;\n  private readonly queue: PQueue;\n\n  constructor(\n    private readonly orderedEntities: TEntity[],\n    concurrency: number,\n    private readonly getGroupId: (job: TEntity) => unknown,\n    private readonly doWork: (job: TEntity, cache: TCache) => PromiseLike<void>,\n  ) {\n    this.queue = new PQueue({\n      autoStart: true,\n      concurrency,\n    });\n  }\n\n  private getNextTasks() {\n    const entity = this.orderedEntities[this.currentIndex];\n    this.currentIndex++;\n    const nextEntities: TEntity[] = [];\n    while (this.currentIndex < this.orderedEntities.length\n      && this.isFromSameGroup(entity, this.orderedEntities[this.currentIndex])\n    ) {\n      nextEntities.push(this.orderedEntities[this.currentIndex]);\n      this.currentIndex++;\n    }\n\n    return () => this.doWorkGroup(entity, nextEntities);\n  }\n\n  private async doWorkGroup(entity: TEntity, nextEntities: TEntity[]) {\n    const cache = {} as TCache;\n    await this.doWork(entity, cache);\n\n    for (const nextEntity of nextEntities) {\n      await this.doWork(nextEntity, cache);\n    }\n  }\n\n  private isFromSameGroup(entity1: TEntity, entity2: TEntity) {\n    return this.getGroupId(entity1) === this.getGroupId(entity2);\n  }\n\n\tasync run() {\n    while (this.currentIndex < this.orderedEntities.length) {\n      this.queue.add(this.getNextTasks());\n    }\n\n    return this.queue.onIdle();\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"223d919bfcf8159bce0f8c00204e6f6a6bbf8c10","contentHash":"8e50ed0a27d18a61aa04fddb362fe86113fa14fd9840e9f03f5231ffef59be34"}}